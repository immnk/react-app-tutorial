{"version":3,"sources":["Lesson1/Button/Button.js","Lesson1/Display/Display.js","Lesson1/Lesson1.js","Lesson2/Lesson2.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","onClickEvent","increment","Display","className","message","Lesson1","_useState","useState","_useState2","Object","slicedToArray","counter","setCounter","incrementCounter","incrementValue","Lesson1_Button_Button","Lesson1_Display_Display","Lesson2","App","lessonNumber","setLesson","changeLesson","src_Lesson1_Lesson1","Lesson2_Lesson2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAYeA,MATf,SAAgBC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAFQ,kBAAMJ,EAAMK,aAAaL,EAAMM,aAE/C,IACMN,EAAMM,kBCELC,MANf,SAAiBP,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cAAcR,EAAMS,gBCc5BC,MAdf,WAAmB,IAAAC,EACaC,mBAAS,GADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACDI,EADCJ,EAAA,GAEXK,EAAmB,SAACC,GAAD,OAAoBF,EAAWD,EAAUG,IAElE,OACElB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACbP,EAAAC,EAAAC,cAACiB,EAAD,CAAQf,aAAca,EAAkBZ,UAAW,IACnDL,EAAAC,EAAAC,cAACiB,EAAD,CAAQf,aAAca,EAAkBZ,UAAW,IACnDL,EAAAC,EAAAC,cAACiB,EAAD,CAAQf,aAAca,EAAkBZ,UAAW,KACnDL,EAAAC,EAAAC,cAACkB,EAAD,CAASZ,QAASO,MCNTM,MANf,WACI,OACIrB,EAAAC,EAAAC,cAAA,6BCkBOoB,MAjBf,WAAe,IAAAZ,EACqBC,mBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNa,EADMX,EAAA,GACQY,EADRZ,EAAA,GAEPa,EAAe,SAACF,GAAD,OAAkBC,EAAUD,IACjD,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,QACZP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAKsB,EAAa,KAAnC,aACJzB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAKsB,EAAa,KAAnC,cAEa,IAAjBF,EAAqBvB,EAAAC,EAAAC,cAACwB,EAAD,MAAc,KAClB,IAAjBH,EAAqBvB,EAAAC,EAAAC,cAACyB,EAAD,MAAc,OCLvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e733a94.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n    const handleClick = () => props.onClickEvent(props.increment);\n    return (\n        <button onClick={handleClick}>\n            +{props.increment}\n        </button>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport './Display.css';\n\nfunction Display(props) {\n    return (\n        <div className=\"messageBox\">{props.message}</div>\n    );\n}\n\nexport default Display;","import React, { useState } from 'react';\nimport Button from './Button/Button';\nimport Display from './Display/Display';\nimport './Lesson1.css';\n\nfunction Lesson1() {\n  const [counter, setCounter] = useState(0);\n  const incrementCounter = (incrementValue) => setCounter(counter + incrementValue);\n  \n  return (\n    <div className=\"lesson1\">\n      <Button onClickEvent={incrementCounter} increment={1}/>\n      <Button onClickEvent={incrementCounter} increment={5}/>\n      <Button onClickEvent={incrementCounter} increment={10}/>\n      <Display message={counter}/>\n    </div>\n  );\n}\n\nexport default Lesson1;\n","import React from 'react';\n\nfunction Lesson2() {\n    return (\n        <div>Lesson2</div>\n    );\n}\n\nexport default Lesson2;","import React, { useState } from 'react';\nimport Lesson1 from './Lesson1/Lesson1';\nimport Lesson2 from './Lesson2/Lesson2';\nimport './App.css';\n\nfunction App() {\n  const [lessonNumber, setLesson] = useState(1);\n  const changeLesson = (lessonNumber) => setLesson(lessonNumber);\n  return (\n    <div>\n      <h1>React Apps built as per lessons</h1>\n      <code>Click on the lesson to move between</code>\n      <ul className=\"menu\">\n        <li><button onClick={()=> changeLesson(1)}>Lesson 1</button></li>\n        <li><button onClick={()=> changeLesson(2)}>Lesson 2</button></li>\n      </ul>\n      { lessonNumber === 1 ? <Lesson1 /> : null }\n      { lessonNumber === 2 ? <Lesson2 /> : null }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}